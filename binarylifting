#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
 #define int long long
#define pb push_back
#define vi vector<int>
#define vvi vector<vector<int>>
#define rp(i, a, b) for (int i = a; i < b; i++)
#define mod 1000000007
#define ump unordered_map
#define us unordered_set
#define sq priority_queue <int, vector<int>, greater<int>> 
#define pq priority_queue<int>
#define ff first
#define ss second
#define pr cout<<"\n";
#define vpi vector<pair<int,int>>
#define rev(nums) reverse(nums.begin(),nums.end())
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>pbds; 
// s.order_of_key() for no of smaller element
// *s.find_by_order(i) to find ith element

 vector<vector<int>>up(200001,vector<int>(20,-1));
 void binary_lifting(int node,int par){
     up[node][0]=par;
     for(int i=1;i<=20;i++){
      if(up[node][i-1]!=-1)up[node][i]=up[up[node][i-1]][i-1];
      else break;
     }
   }
 int query(int node,int k){
  int d=0;

        while(k and node!=-1){
          if(k&1){
            node=up[node][d];
          }
          d++;
          k/=2;
        }
        return node;
 }
 
void solve(){  
    
 
     int n,q;
     cin>>n>>q;
     vector<int>parent(n+1);
     parent[1]=-1;
     rp(i,2,n+1){
      cin>>parent[i];
     }  
      
    for(int i=1;i<=n;i++){
      binary_lifting(i,parent[i]);
    }
      while(q--){
        int node,k;
        cin>>node>>k;
        cout<<query(node,k)<<endl;
      }
}
signed main()
{
  fast_io;
  #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif

  solve();


 
  
 return 0;
}

// Ravikant Yadav
// 500000004
